server:
  port: 11234

spring:
  graphql:
    graphiql:
      enabled: true
      path: /graphiql
    cors:
      allowed-origins: "*"
      allowed-methods: "*"
      allowed-headers: "*"
      max-age: 180
      exposed-headers: "*"
#      allowed-origin-patterns: "http://localhost:11234"
#      allow-credentials: true

    schema:
      file-extensions: .graphqls
      inspection:
        enabled: true
      locations: classpath:graphql/**/
      printer:
        enabled: true
      introspection:
        enabled: true

  application:
    name:  ecom-service
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      settings:
        x-frame-options: ''
        web-allow-others: true
      enabled: true
    datasource:
      platform: h2

    tomcat:
      test-while-idle: true
      validation-query: SELECT 1

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: false
    properties:
      hibernate:
#        format_sql: true
        ddl-auto: update
        jdbc:
          time_zone: UTC


  main:
    allow-bean-definition-overriding: true
    #      javax:
#        persistence:
#          schema-generation:
#            create-source: metadata
#            scripts:
#              action: create


application:
  security:
    jwt:
      secret-key: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
      expiration: 86400000 # a day
      refresh-token:
        expiration: 604800000 # 7 days

graphql:
  extended-scalars: BigDecimal, Date
  servlet:
    actuator-metrics: true
    # Sets if GraphQL servlet should be created and exposed. If not specified defaults to "true".
    enabled: true
    # Sets the path where GraphQL servlet will be exposed. If not specified defaults to "/graphql"
    mapping: /graphql
    cors-enabled: true
    cors:
      allowed-origins: "*"
      allowed-methods: GET, HEAD, POST
      exposed-headers: "*"
      allowed-headers: "*"
    # if you want to @ExceptionHandler annotation for custom GraphQLErrors
    exception-handlers-enabled: true
    context-setting: PER_REQUEST_WITH_INSTRUMENTATION
    # Sets if asynchronous operations are supported for GraphQL requests. If not specified defaults to true.
    async-mode-enabled: true
    tracing-enabled: true
    subscriptions:
      websocket:
        path: /subscriptions
      apollo:
        keep-alive-enabled: true
  playground:
    mapping: /playground
    endpoint: /graphql
    subscriptionEndpoint: /subscriptions
    staticPath.base: my-playground-resources-folder
    enabled: true
    pageTitle: Playground
    cdn:
      enabled: false
      version: latest
    settings:
      editor.cursorShape: line
      editor.fontFamily: "'Source Code Pro', 'Consolas', 'Inconsolata', 'Droid Sans Mono', 'Monaco', monospace"
      editor.fontSize: 14
      editor.reuseHeaders: true
      editor.theme: dark
      general.betaUpdates: false
      prettier.printWidth: 80
      prettier.tabWidth: 2
      prettier.useTabs: false
      request.credentials: omit
      schema.polling.enable: true
      schema.polling.endpointFilter: "*localhost*"
      schema.polling.interval: 2000
      schema.disableComments: true
      tracing.hideTracingResponse: true
    headers:
      headerFor: AllTabs
    tabs:
      - name: Example Tab
        query: classpath:exampleQuery.graphql
        headers:
          SomeHeader: Some value
        variables: classpath:variables.json
        responses:
          - classpath:exampleResponse1.json
          - classpath:exampleResponse2.json
  tools:
    schema-location-pattern: "**/*.graphqls"


voyager:
  enabled: true
  basePath: /
  mapping: /voyager
  endpoint: /graphql
  cdn:
    enabled: false
    version: latest
  pageTitle: Voyager
  displayOptions:
    skipRelay: true
    skipDeprecated: true
    rootType: Query
    sortByAlphabet: false
    showLeafFields: true
    hideRoot: false
  hideDocs: false
  hideSettings: false

logging:
  level:
    org:
      hibernate.sql: warn
      #springframework: DEBUG
      springframework.security: DEBUG

    graphql: DEBUG

decorator:
  datasource:
    p6spy: # logging SQL after binding parameters
      enable-logging: true
      multiline: true
      logging: sysout
      log-format: '%(sql)'

openapi:
  service:
    title: ecom-service doc #title that you will want to display in the swagger ui
    version: 1.0.0
    url: http://localhost:11234    #api gateway url
springdoc:
  api-docs:
    path: /v3/api-docs #these urls will used to load the swagger ui of this service by the api gateway
  swagger-ui:
    path: /swagger-ui.html
